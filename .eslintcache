[{"D:\\代码下载\\chance\\my-app\\src\\index.js":"1","D:\\代码下载\\chance\\my-app\\src\\App.js":"2","D:\\代码下载\\chance\\my-app\\src\\reportWebVitals.js":"3","D:\\代码下载\\chance\\my-app\\src\\Counter\\Counter.js":"4","D:\\代码下载\\untitled\\clone2\\src\\index.js":"5","D:\\代码下载\\untitled\\clone2\\src\\App.js":"6","D:\\代码下载\\untitled\\clone2\\src\\reportWebVitals.js":"7","D:\\代码下载\\untitled\\clone2\\src\\Counter\\Counter.js":"8","D:\\代码下载\\untitled\\clone2\\src\\context.js":"9","D:\\代码下载\\untitled\\clone2\\src\\SumList\\SumList.js":"10","D:\\代码下载\\untitled\\clone2\\src\\judgebox\\judgebox.js":"11","D:\\代码下载\\untitled\\clone2\\src\\Judgebox\\Judgebox.js":"12"},{"size":245,"mtime":1612207240365,"results":"13","hashOfConfig":"14"},{"size":181,"mtime":1612458685212,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":10164,"mtime":1612895902527,"results":"17","hashOfConfig":"14"},{"size":257,"mtime":1612896968787,"results":"18","hashOfConfig":"19"},{"size":194,"mtime":1612896968781,"results":"20","hashOfConfig":"19"},{"size":375,"mtime":1612896968791,"results":"21","hashOfConfig":"19"},{"size":12800,"mtime":1614445656351,"results":"22","hashOfConfig":"19"},{"size":136,"mtime":1613747062723,"results":"23","hashOfConfig":"19"},{"size":12869,"mtime":1614445628652,"results":"24","hashOfConfig":"19"},{"size":5591,"mtime":1613753516063,"results":"25","hashOfConfig":"19"},{"size":2266,"mtime":1614445628683,"results":"26","hashOfConfig":"19"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"17ymbcy",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"kvnon2",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},"D:\\代码下载\\chance\\my-app\\src\\index.js",[],["57","58"],"D:\\代码下载\\chance\\my-app\\src\\App.js",[],"D:\\代码下载\\chance\\my-app\\src\\reportWebVitals.js",[],"D:\\代码下载\\chance\\my-app\\src\\Counter\\Counter.js",["59","60"],"D:\\代码下载\\untitled\\clone2\\src\\index.js",[],["61","62"],"D:\\代码下载\\untitled\\clone2\\src\\App.js",[],"D:\\代码下载\\untitled\\clone2\\src\\reportWebVitals.js",[],"D:\\代码下载\\untitled\\clone2\\src\\Counter\\Counter.js",[],"D:\\代码下载\\untitled\\clone2\\src\\context.js",[],"D:\\代码下载\\untitled\\clone2\\src\\SumList\\SumList.js",[],["63","64"],"D:\\代码下载\\untitled\\clone2\\src\\judgebox\\judgebox.js",["65","66"],"import React, {useContext} from \"react\";\r\nimport styled from 'styled-components'\r\n\r\nimport {Checkbox} from \"antd\";\r\nimport SHA256 from \"crypto-js/sha256\";\r\n\r\nconst MyCheckbox = styled(Checkbox)`\r\n    font-size: 10px;\r\n    .ant-checkbox-inner{\r\n        background: #fff;\r\n        border: 2px solid #696969;\r\n        border-radius: 0;\r\n        ::after{\r\n            border: 2px solid #696969;\r\n            border-top: 0;\r\n            border-left: 0;\r\n        }\r\n    }\r\n`\r\n\r\nfunction judgebox(){\r\n\r\n    const { data,judge,chain,setChain,difficulty } = useContext(secondContext);\r\n\r\n    //judgebox onChange\r\n    function onChange(e) {\r\n        let currentTx = data.map( item => { return item.data } ).reduce((prev, item) => {\r\n            return prev.concat(item)\r\n        }).filter( item => item.txhash === e.target.value );\r\n        let now = new Date();\r\n        let newTx = {\r\n            id: currentTx[0].id,\r\n            name: currentTx[0].name,\r\n            complete: !currentTx[0].complete,\r\n            RUB: currentTx[0].RUB,\r\n            RMB: currentTx[0].RMB,\r\n            USD: currentTx[0].USD,\r\n            timestamp: now,\r\n            txhash: calculateTxHash(currentTx[0].id, currentTx[0].name, currentTx[0].RUB, currentTx[0].RMB, currentTx[0].USD, now, !currentTx[0].complete)\r\n        }\r\n        if ( !isLastestBlockFull() ) {\r\n            setChain( draft => {\r\n                draft[data.length-1].data.push(newTx);\r\n                draft[data.length-1].hash = calculateHash(draft[data.length-1].index, draft[data.length-1].previousHash, draft[data.length-1].timestamp, draft[data.length-1].data);\r\n            });\r\n        } else {\r\n            let block = {\r\n                data: []\r\n            };\r\n            block.index = data[data.length-1].index + 1;\r\n            block.previousHash =  data[data.length-1].hash;\r\n            let now = new Date();\r\n            block.timestamp = now;\r\n            block.data.push(newTx);\r\n            block.nonce = 0;\r\n            block.hash = calculateHash(block.index, block.previousHash, block.timestamp, block.data, block.nonce);\r\n            let miner = mineBlock(difficulty, block);\r\n            block.nonce = miner.nonce;\r\n            block.hash = miner.hash;\r\n            setChain(draft => {\r\n                draft.push(block);\r\n            })\r\n        }\r\n    }\r\n\r\n    //chaim methods\r\n    function calculateHash(index, previousHash, timestamp, data, nonce) {\r\n        return SHA256(index + previousHash + JSON.stringify(timestamp) + JSON.stringify(data) + nonce).toString();\r\n    }\r\n\r\n    function calculateTxHash(id, name, RUB, RMB, USD, timestamp, complete) {\r\n        return SHA256(id + name + RUB + RMB + USD + complete + JSON.stringify(timestamp)).toString();\r\n    }\r\n\r\n    function isLastestBlockFull() {\r\n        if (chain[chain.length - 1].data.length >= 5) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    function mineBlock(difficulty, block) {\r\n        let nonce = 0;\r\n        let hash = block.hash;\r\n        while (hash.substring(0, difficulty) !== Array(difficulty +1).join(\"0\")) {\r\n            nonce++;\r\n            hash = calculateHash(block.index, block.previousHash, block.timestamp, block.data, nonce);\r\n        }\r\n        return {\r\n            hash: hash,\r\n            nonce: nonce\r\n        }\r\n    }\r\n\r\n    function onChange(e) {\r\n        let currentTx = chain.map( item => { return item.data } ).reduce((prev, item) => {\r\n            return prev.concat(item)\r\n        }).filter( item => item.txhash === e.target.value );\r\n        let now = new Date();\r\n        let newTx = {\r\n            id: currentTx[0].id,\r\n            name: currentTx[0].name,\r\n            complete: !currentTx[0].complete,\r\n            RUB: currentTx[0].RUB,\r\n            RMB: currentTx[0].RMB,\r\n            USD: currentTx[0].USD,\r\n            timestamp: now,\r\n            txhash: calculateTxHash(currentTx[0].id, currentTx[0].name, currentTx[0].RUB, currentTx[0].RMB, currentTx[0].USD, now, !currentTx[0].complete)\r\n        }\r\n        if ( !isLastestBlockFull() ) {\r\n            setChain( draft => {\r\n                draft[data.length-1].data.push(newTx);\r\n                draft[data.length-1].hash = calculateHash(draft[chain.length-1].index, draft[chain.length-1].previousHash, draft[chain.length-1].timestamp, draft[chain.length-1].data);\r\n            });\r\n        } else {\r\n            let block = {\r\n                data: []\r\n            };\r\n            block.index = chain[chain.length-1].index + 1;\r\n            block.previousHash =  chain[chain.length-1].hash;\r\n            let now = new Date();\r\n            block.timestamp = now;\r\n            block.data.push(newTx);\r\n            block.nonce = 0;\r\n            block.hash = calculateHash(block.index, block.previousHash, block.timestamp, block.data, block.nonce);\r\n            let miner = mineBlock(difficulty, block);\r\n            block.nonce = miner.nonce;\r\n            block.hash = miner.hash;\r\n            setChain(draft => {\r\n                draft.push(block);\r\n            })\r\n        }\r\n    }\r\n    if (judge) {\r\n        return (\r\n            <>\r\n                <MyCheckbox checked={data.complete} value={data.txhash} onChange={onChange}>\r\n                    {data.name}\r\n                </MyCheckbox>\r\n            </>\r\n        );\r\n    } else {\r\n        return (\r\n            <>\r\n                <MyCheckbox checked={data.complete} value={data.txhash} onChange={onChange}>\r\n                    <del>{data.name}</del>\r\n                </MyCheckbox>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default judgebox",["67","68"],"D:\\代码下载\\untitled\\clone2\\src\\Judgebox\\Judgebox.js",["69","70","71","72","73","74"],"import React, {useContext} from \"react\";\r\nimport styled from 'styled-components'\r\nimport myContext from \"../context\";\r\nimport {Checkbox} from \"antd\";\r\nimport SHA256 from \"crypto-js/sha256\";\r\n\r\nconst MyCheckbox = styled(Checkbox)`\r\n    font-size: 10px;\r\n    .ant-checkbox-inner{\r\n        background: #fff;\r\n        border: 2px solid #696969;\r\n        border-radius: 0;\r\n        ::after{\r\n            border: 2px solid #696969;\r\n            border-top: 0;\r\n            border-left: 0;\r\n        }\r\n    }\r\n`\r\n\r\nfunction Judgebox(){\r\n\r\n    const { data,judge,chain,setChain,difficulty,wait,setWait,queue,setQueue } = useContext(myContext);\r\n\r\n    //Judgebox onChange\r\n    function onChange(e) {\r\n        let currentTx = chain.map( item => { return item.data } ).reduce((prev, item) => {\r\n            return prev.concat(item)\r\n        }).filter( item => item.txhash === e.target.value );\r\n        if (currentTx.length === 0){\r\n            currentTx = queue.filter( item => item.txhash === e.target.value );\r\n        }\r\n        let now = new Date();\r\n        let newTx = {\r\n            id: currentTx[0].id,\r\n            name: currentTx[0].name,\r\n            complete: !currentTx[0].complete,\r\n            RUB: currentTx[0].RUB,\r\n            RMB: currentTx[0].RMB,\r\n            USD: currentTx[0].USD,\r\n            timestamp: now,\r\n            txhash: calculateTxHash(currentTx[0].id, currentTx[0].name, currentTx[0].RUB, currentTx[0].RMB, currentTx[0].USD, now, !currentTx[0].complete)\r\n        }\r\n        setQueue(q => {\r\n            q.push(newTx);\r\n        });\r\n    }\r\n\r\n    //chaim methods\r\n    function calculateHash(index, previousHash, timestamp, data, nonce) {\r\n        return SHA256(index + previousHash + JSON.stringify(timestamp) + JSON.stringify(data) + nonce).toString();\r\n    }\r\n\r\n    function calculateTxHash(id, name, RUB, RMB, USD, timestamp, complete) {\r\n        return SHA256(id + name + RUB + RMB + USD + complete + JSON.stringify(timestamp)).toString();\r\n    }\r\n\r\n    function isLastestBlockFull() {\r\n        if (chain[chain.length - 1].data.length >= 5) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    if (!judge) {\r\n        return (\r\n            <>\r\n                <MyCheckbox checked={data.complete} value={data.txhash} onChange={onChange}>\r\n                    {data.name}\r\n                </MyCheckbox>\r\n            </>\r\n        );\r\n    } else {\r\n        return (\r\n            <>\r\n                <MyCheckbox checked={data.complete} value={data.txhash} onChange={onChange}>\r\n                    <del>{data.name}</del>\r\n                </MyCheckbox>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Judgebox",{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":198,"column":7,"nodeType":"81","endLine":198,"endColumn":35,"suggestions":"82"},{"ruleId":"79","severity":1,"message":"83","line":214,"column":8,"nodeType":"81","endLine":214,"endColumn":10,"suggestions":"84"},{"ruleId":"75","replacedBy":"85"},{"ruleId":"77","replacedBy":"86"},{"ruleId":"75","replacedBy":"87"},{"ruleId":"77","replacedBy":"88"},{"ruleId":"89","severity":2,"message":"90","line":23,"column":54,"nodeType":"91","endLine":23,"endColumn":64},{"ruleId":"92","severity":1,"message":"93","line":95,"column":14,"nodeType":"91","messageId":"94","endLine":95,"endColumn":22},{"ruleId":"75","replacedBy":"95"},{"ruleId":"77","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":23,"column":30,"nodeType":"91","messageId":"99","endLine":23,"endColumn":38},{"ruleId":"97","severity":1,"message":"100","line":23,"column":39,"nodeType":"91","messageId":"99","endLine":23,"endColumn":49},{"ruleId":"97","severity":1,"message":"101","line":23,"column":50,"nodeType":"91","messageId":"99","endLine":23,"endColumn":54},{"ruleId":"97","severity":1,"message":"102","line":23,"column":55,"nodeType":"91","messageId":"99","endLine":23,"endColumn":62},{"ruleId":"97","severity":1,"message":"103","line":50,"column":14,"nodeType":"91","messageId":"99","endLine":50,"endColumn":27},{"ruleId":"97","severity":1,"message":"104","line":58,"column":14,"nodeType":"91","messageId":"99","endLine":58,"endColumn":32},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'inList' and 'setTaskNull'. Either include them or remove the dependency array.","ArrayExpression",["107"],"React Hook useEffect has a missing dependency: 'setRate'. Either include it or remove the dependency array.",["108"],["105"],["106"],["105"],["106"],"react-hooks/rules-of-hooks","React Hook \"useContext\" is called in function \"judgebox\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","Identifier","no-redeclare","'onChange' is already defined.","redeclared",["105"],["106"],"no-unused-vars","'setChain' is assigned a value but never used.","unusedVar","'difficulty' is assigned a value but never used.","'wait' is assigned a value but never used.","'setWait' is assigned a value but never used.","'calculateHash' is defined but never used.","'isLastestBlockFull' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},"Update the dependencies array to be: [task.USD, task.RMB, task.RUB, inList, setTaskNull]",{"range":"113","text":"114"},"Update the dependencies array to be: [setRate]",{"range":"115","text":"116"},[4944,4972],"[task.USD, task.RMB, task.RUB, inList, setTaskNull]",[5429,5431],"[setRate]"]